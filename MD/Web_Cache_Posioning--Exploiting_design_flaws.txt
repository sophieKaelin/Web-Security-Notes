## Exploiting design flaws
General
• add cache buster at end of URL: /?cb=1234 and send twice to see if it gets cached (X-Cache: hit)
• Play around with headers and see if anything is reflected? 
• Look for JS files being requested, see if you can adjust the headers so that something is reflected.
• Use Param Miner (Guess Headers) in Burp to determine which headers to test
• Maybe create fake page with the full extension of target JS and then redirect to that page using X-Host/Forwarded headers

Vulnerabilities generally arise due to flaws in design, and with poor implementation.

Deliver an XSS attack
• Look for reflections in the response, and change the value of that header with an XSS payload (if they are unkeyed)
• a."><script>alert(1)</script>

Exploit unsafe handling of resource imports
• unkeyed headers used to dynamically generate URLS for importing resources
• Change valud of header to domain they control
   ◇ Point to naughty JS
• If Cached, JS import/executed in browser session of any user with matched cache key.
• Try adding the X-Forwarded-Host header

Exploit Cookie-Handling vulnerabilities
• See if the cookie is reflected anywhere and add something naughty (xss?)
• You can put something directly in the web page, rather than caching a URL to an exploit server.

Exploit using multiple headers
• Look at X-Forwarded-Proto header and host? Can you use these both to deliver a malicious page?
• X-Forwarded-Scheme header.

Exploit responses that expose too much info
• Cache-control directives
   ◇ helpful information can be gathered from requests: how often cache purged, how old current response is (age, max-age)
   ◇ info enables more subtle attacks (less trial and error)
• Vary header
   ◇ specifies list of additional headers that should be treated as cache key (even if normally unkeyed)
   ◇ User-Agent is often in that list.
   ◇ use this information to see (e.g.) which user agent victims use, tailored attack (create a page that logs the user agent of people, target attack at just users with that agent)

Exploit DOM-based vulnerabilities
• if js used to fetch additional data from back-end, you can make it fetch something bad
• e.g. => fetch JSON data that will dynamically execute (but make sure you enable CORS)

